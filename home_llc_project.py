# -*- coding: utf-8 -*-
"""Home.LLC_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1alEbvl6bV5TTjiuREinyCGCuBDpa7_12

# Project Information

**Project Title**:
Analyzing Key Factors Influencing US Home Prices Over the Last 20 Years

**Project Overview**:
The objective of this project is to build a data science model that explains the impact of key factors on US home prices over the last two decades. The project involves finding publicly available data for these influencing factors and using the S&P Case-Schiller Home Price Index (CSUSHPIS) as a proxy for home prices.

![Real Estate Image](https://www.goldmansachs.com/intelligence/pages/articles/real-estate-may-still-offer-a-hedge-for-investors/800x450.jpg)

**Name** : Sachin Boora

**Contact** : sachnboora@gmail.com, +91-9996292765

# Project Plan

We will cover this entire project by dividing it in 4 sections :     



1.   **Data Collection** : I will collect data from various sources including US Govt offical websites and from different publicly available data. I will share links for each data source as and when required.
2.   **Data Preparation** : After collecting data, i will consolidate all the data into a csv file and access the file.
3. **EDA** : I will analyse the prepared data using various plotting methods and how different factors are correlated to each other.
4. **Modeling** : With the help of all the above information , i will build a suitable model which will predict index prices in US real estate.

# Data Collection

I have collected data mainly from https://fred.stlouisfed.org/

The website "https://fred.stlouisfed.org/" is an official website of the Federal Reserve Economic Data (FRED), which is maintained by the Federal Reserve Bank of St. Louis. FRED is an extensive online database of economic data and financial indicators

I have downloaded data from ***2001-01 to 2023-07*** in csv format.
Here are the files details and source from where I have fetched data :

S&P/Case-Shiller U.S. National Home Price Index : https://fred.stlouisfed.org/series/CSUSHPISA

GDP : https://fred.stlouisfed.org/series/GDP

New Privately-Owned Housing Units Started: Total Units : https://fred.stlouisfed.org/series/HOUST

30-Year Fixed Rate Mortgage Average in the United States : https://fred.stlouisfed.org/series/MORTGAGE30US

Monthly Supply of New Houses in the United States : https://fred.stlouisfed.org/series/MSACSR

Personal Income : https://fred.stlouisfed.org/series/PI

Population : https://fred.stlouisfed.org/series/POPTHM

Personal Saving Rate : https://fred.stlouisfed.org/series/PSAVERT

Unemployment Rate : https://fred.stlouisfed.org/series/UNRATE

**Target Data** : S&P/Case-Shiller U.S. National Home Price Index

**Feature Data** : All other Data

# Data Preparation

Let's clean our data now by changing column names, setting date as Index
"""

import pandas as pd

target_data = pd.read_csv("/content/Project Data/ S&P:Case-Shiller U.S. National Home Price Index.csv")
target_data.head()

target_data.set_index('DATE', inplace=True)
target_data.rename(columns={'CSUSHPISA': 'target'}, inplace=True)
target_data.index = pd.to_datetime(target_data.index)
target_data.head()

target_data.to_csv("Cleaned Data/target.csv")

"""Lets follow the same process to rename columns and set date column as index for all other feature data

## Personal Income

Personal Income is one of the key factors that influence US real estate prices as increase in personal income also led to increase in purchasing power which ultimately increases demand and prices of real estate
"""

personal_income = pd.read_csv("/content/Project Data/Personal Income.csv")
personal_income.head()

personal_income.set_index('DATE', inplace=True)
personal_income.rename(columns={'PI': 'Personal Income'}, inplace=True)
personal_income.index = pd.to_datetime(personal_income.index)
personal_income.head()

personal_income.to_csv("Cleaned Data/Personal_Income.csv")

"""## Population

As population increases, also grows the demand of houses to live which will fuel the demand and prices of real estate
"""

population = pd.read_csv("/content/Project Data/Population.csv")
population.head()

population.set_index('DATE', inplace=True)
population.rename(columns={'POPTHM': 'Population'}, inplace=True)
population.index = pd.to_datetime(population.index)
population.head()

population.to_csv("Cleaned Data/Population.csv")

"""## Unemployment Rate

Unemployment rate is one of the direct factor that impacts the prices of real estate as the more the unemployment, less the buying capacity, hence less demand led to less prices
"""

unemployment_rate = pd.read_csv("/content/Project Data/Unemployment Rate.csv")
unemployment_rate.head()

unemployment_rate.set_index('DATE', inplace=True)
unemployment_rate.rename(columns={'UNRATE': 'Unemployment Rate'}, inplace=True)
unemployment_rate.index = pd.to_datetime(unemployment_rate.index)
unemployment_rate.head()

unemployment_rate.to_csv("Cleaned Data/Unemployment_Rate.csv")

"""## GDP

GDP is the criteria which shows the development of a nation. The more the GDP is, the more developed nation is, which also directly impacts the prices of real estate
"""

gdp_data = pd.read_csv("/content/Project Data/GDP.csv")
gdp_data.head()

gdp_data.set_index('DATE', inplace=True)
gdp_data.index = pd.to_datetime(gdp_data.index)

# Resampling
gdp_data = gdp_data.resample('M').ffill() #this will resample the index to monthly and then fill extra created rows with last observed value

# Set the day of the index to 1
gdp_data.index = gdp_data.index.map(lambda x: x.replace(day=1))
gdp_data = gdp_data["2000-01-01":"2023-07-01"]

gdp_data.head()

gdp_data.to_csv("/content/Cleaned Data/GDP.csv")

"""## Mortgage Rate

A mortgage rate is the interest rate charged for a home loan. If mortgage rate is high, people will be less interested to take a loan for home, which will negatively impact the prices
"""

mortgage_rate_monthly = pd.read_csv("/content/Project Data/Mortgage_monthly.csv")
mortgage_rate_monthly.head()

mortgage_rate_monthly.set_index('DATE', inplace=True)
mortgage_rate_monthly.rename(columns={'MORTGAGE30US': 'Mortgage Rate Monthly'}, inplace=True)
mortgage_rate_monthly.index = pd.to_datetime(mortgage_rate_monthly.index)
mortgage_rate_monthly.head()

mortgage_rate_monthly.to_csv("/content/Cleaned Data/Mortgage_Rate_monthly.csv")

"""## Personal Saving Rate

The personal saving rate is a measure that reflects the portion of disposable income that households save rather than spend. As savings increases, it means people are spending less on investments such as real estate which slows the demand for buying new houses
"""

personal_saving_rate = pd.read_csv("/content/Project Data/Personal Saving Rate.csv")
personal_saving_rate.head()

personal_saving_rate.set_index('DATE', inplace=True)
personal_saving_rate.rename(columns={'PSAVERT': 'Personal Saving Rate'}, inplace=True)
personal_saving_rate.index = pd.to_datetime(personal_saving_rate.index)
personal_saving_rate.head()

personal_saving_rate.to_csv("Cleaned Data/Personal_Saving_Rate.csv")

"""## Inventory Level Impact

The balance between housing supply and demand in a particular market can influence home prices. Limited supply relative to demand tends to drive prices up. Lets clean our data related to Houses construction completed, under construction, monthly supply of new houses
"""

# Monthly supply of new houses in US
monthly_supply_houses = pd.read_csv("/content/Project Data/Monthly Supply of New Houses in the United States.csv")
monthly_supply_houses.head()

monthly_supply_houses.set_index('DATE', inplace=True)
monthly_supply_houses.rename(columns={'MSACSR': 'ratio of new houses for sale to new houses sold'}, inplace=True)
monthly_supply_houses.index = pd.to_datetime(monthly_supply_houses.index)
monthly_supply_houses.head()

monthly_supply_houses.to_csv("Cleaned Data/Monthly_Supply_Houses.csv")

# New Housing Project started
new_housing_project_started = pd.read_csv("/content/Project Data/ New Privately-Owned Housing Units Started- Total Units.csv")
new_housing_project_started.head()

new_housing_project_started.set_index('DATE', inplace=True)
new_housing_project_started.rename(columns={'HOUST': 'Housing unit started'}, inplace=True)
new_housing_project_started.index = pd.to_datetime(new_housing_project_started.index)
new_housing_project_started.head()

new_housing_project_started.to_csv("Cleaned Data/New_Housing_Unit_Started.csv")

"""# EDA

In this section, we will explore the data we have cleaned in last section and try to fetch meaningful comparison and correlation
"""

import numpy as np #for feature engineering
import matplotlib.pyplot as plt #for various plotting
import seaborn as sns #for various plotting
import os

"""Lets join all our csv files into 1 csv file"""

path = '/content/Cleaned Data'

csv_files = [os.path.join(path, f) for f in os.listdir(path) if f.endswith('.csv')]

dfs = [pd.read_csv(f) for f in csv_files]

# Merging the dataframes on the 'DATE' column
final_df = pd.concat(dfs, ignore_index=False).groupby('DATE').sum()

# Lets save this new final df to a new csv file
final_df.to_csv("/content/Final Data/final_data.csv")

final_data = pd.read_csv("/content/Final Data/final_data.csv")

final_data.set_index('DATE', inplace=True)
final_data.index = pd.to_datetime(final_data.index)

final_data.head(15)

final_data.info()

final_data.describe()

# Missing values
print(final_data.isnull().sum())

"""As we can see , there is no missing data in our dataset so we are good to proceed with next step"""

# Correlation matrix
correlation_matrix = final_data.corr()

# Heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

"""The heatmap shows that the target variable (housing price) is strongly correlated with several other variables, including:

Population (0.78)

Personal income (0.9)

GDP (0.91)

Mortgage rate monthly (-0.35)

This means that these variables are likely to have a significant impact on housing prices. For example, if personal income or GDP increases, housing prices are also likely to increase. Conversely, if mortgage rates increase, housing prices are likely to decrease.
"""

# Lets plot density plot

plt.figure(figsize=(12, 6))
for col in final_data.columns.tolist():
    plt.figure(figsize=(6, 4))
    sns.displot(data=final_data, x=col, kde =True)
    plt.xlabel(f"{col}")
    plt.ylabel("Count")
    plt.title(f'Distribution Plot for {col}')
    plt.show()

# Time series plot
plt.figure(figsize=(12, 8))
for col in final_data.columns.tolist():
  plt.plot(final_data[col])
  plt.ylabel(f"{col}")
  plt.xlabel('DATE')
  plt.title('Time Series Plot of Home Prices')
  plt.show()

# lets plot boxplot for checking outliers in our data
plt.figure(figsize=(12, 6))
for col in final_data.columns.tolist():
    plt.figure(figsize=(6, 4))
    sns.boxplot(data=final_data, x=col)
    plt.xlabel(f"{col}")
    plt.title(f'Box Plot for {col}')
    plt.show()

"""As we can see, there are outlier in our data mainly in :    

*   Unemployment Rate
*   Personal Saving Rate
*   ratio of new houses for sale to new houses sold




"""

# Lets treat skewness and outliers
final_data['Personal Saving Rate'].skew()

"""As we can see, Personal Saving Rate is highly right skewed."""

from scipy.stats import boxcox
final_data['boxcox_personal_saving_rate'], _ = boxcox(final_data['Personal Saving Rate'])

final_data['Personal Saving Rate'].skew()

final_data['boxcox_personal_saving_rate'].skew()

final_data['boxcox_personal_saving_rate'].hist()
plt.title("Distribution of Personal Saving rate after handling outliers")
plt.xlabel("boxcox_personal_saving_rate")
plt.ylabel("Count")
plt.show()

final_data['Unemployment Rate'].skew()

final_data['boxcox_Unemployment Rate'], _ = boxcox(final_data['Unemployment Rate'])

final_data['boxcox_Unemployment Rate'].skew()

final_data['boxcox_Unemployment Rate'].hist()
plt.title("Distribution of unemployment rate after handling outliers")
plt.xlabel("boxcox_unemployment rate")
plt.ylabel("Count")
plt.show()

"""Lets understand the correlation between the data"""

corr_matrix= final_data.corr()
corr_matrix['target'].sort_values(ascending=False)

final_data.to_csv("/content/Final Data/final_data.csv")

"""# Modeling

Lets start with reading and spliting the data
"""

final_data.drop(columns={'Personal Saving Rate', 'Unemployment Rate'}, inplace=True)

final_data.head(15)

from sklearn.model_selection import train_test_split

X = final_data[['Population', 'ratio of new houses for sale to new houses sold', 'Mortgage Rate Monthly', 'Housing unit started',	'GDP',	'Personal Income',	'boxcox_personal_saving_rate',	'boxcox_Unemployment Rate']]
y = final_data['target']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Initialize the linear regression model
model = LinearRegression()

model.fit(X_train, y_train) #fitting the model to training data

predictions = model.predict(X_test)

# Lets evaluate our model using MSE and R-squared
from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Coefficients and intercept
coefficients = model.coef_
intercept = model.intercept_

print("Coefficients:", coefficients)
print("Intercept:", intercept)

#Lets visualise our model prediction

plt.scatter(y_test, predictions)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Actual vs. Predicted Values")

x = np.linspace(min(y_test), max(y_test), 100)
plt.plot(x, x, color='red', linestyle='--')
plt.show()

